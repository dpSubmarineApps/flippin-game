{"ast":null,"code":"var _jsxFileName = \"/Users/u393899/workspace/flippin-game/game/src/components/Gameboard.js\";\nimport React, { Component } from \"react\";\nimport Card from \"./Card\";\nimport Player from \"./Player\";\nimport song from \"../resources/sounds/simpsonsThemeSong.mp3\"; //TODO: add to repo, host it somewhere\n\nclass Gameboard extends Component {\n  constructor(props) {\n    super(props);\n    this.characters = [\"Apu\", \"Bart\", \"Homer\", \"Jeff\", \"Itchy\", \"Krusty\", \"Lisa\", \"Maggie\", \"Marge\", \"MrBurns\", \"Ned\", \"Ralph\", \"Smithers\"];\n    this.randomizedCharacters = [];\n    this.queue = [];\n    this.matched = [];\n    this.clickCount = 0;\n    this.player = React.createElement(Player, {\n      clicks: this.clickCount,\n      initials: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    });\n  }\n\n  generatePlayer() {\n    let statusElement = document.getElementById(\"status\"); // statusElement.append(<Player clicks={this.clickCount} initials={\"\"}/>);\n    //        statusElement.append(\"<p>this is the string</p>\");\n\n    statusElement.appendChild(this.player);\n  }\n\n  flipMe(currentCard) {\n    this.clickCount++;\n\n    if (!this.matched.includes(currentCard.props.character)) {\n      this.queue.push(currentCard);\n\n      if (this.queue.length === 1) {\n        currentCard.setState(prevState => ({\n          isFlipped: !prevState.isFlipped\n        }));\n      }\n\n      if (this.queue.length === 2) {\n        if (this.queue[0].props.character === currentCard.props.character && this.queue[0].props.id !== currentCard.props.id) {\n          currentCard.setState(prevState => ({\n            isFlipped: !prevState.isFlipped\n          }));\n          currentCard.handleClick = null;\n          this.queue[0].handleClick = null;\n          this.queue = [];\n          this.matched.push(currentCard.props.character);\n\n          if (this.matched.length === 8) {\n            document.getElementById('themeSong').play();\n            document.getElementById('clickCountTotal').innerText = \"WINNER!!! Your click count was: \" + this.clickCount + \"!\";\n            document.getElementById('leaderboard').innerText = \"You don't make it to our list yet\";\n            this.generatePlayer(); // document.getElementById('playerPlaceholder').append(this.player);\n            //this.player.clicks = this.clickCount;\n\n            this.sleep(1100, this).then(() => {\n              document.getElementById('status').style.display = \"block\"; //                       document.getElementById('playerForm').style.display=\"block\";\n              // document.getElementById('inputClicks').innerText=this.clickCount;\n            });\n          }\n        } else {\n          currentCard.setState(prevState => ({\n            isFlipped: !prevState.isFlipped\n          }));\n          this.sleep(1000, this).then(() => {\n            currentCard.setState(prevState => ({\n              isFlipped: !prevState.isFlipped\n            }));\n            this.queue[0].setState(prevState => ({\n              isFlipped: !prevState.isFlipped\n            }));\n            this.queue = [];\n          });\n        }\n      }\n    }\n  }\n\n  sleep(ms, currentObject) {\n    return new Promise(resolve => setTimeout(resolve, ms, currentObject));\n  }\n\n  shuffleArray(array) {\n    let currentIndex = array.length;\n    let temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  render() {\n    this.shuffleArray(this.characters);\n    this.randomizedCharacters = this.randomizedCharacters.concat(this.characters.slice(0, 8), this.characters.slice(0, 8));\n    this.shuffleArray(this.randomizedCharacters);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"playerPlaceholder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"clickCountTotal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"leaderboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"audio\", {\n      id: \"themeSong\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"source\", {\n      src: song,\n      type: \"audio/mp3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      id: \"gameboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.randomizedCharacters.map((character, id) => {\n      return React.createElement(Card, {\n        id: id,\n        parent: this,\n        character: character,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      });\n    })));\n  }\n\n}\n\nexport default Gameboard;","map":{"version":3,"sources":["/Users/u393899/workspace/flippin-game/game/src/components/Gameboard.js"],"names":["React","Component","Card","Player","song","Gameboard","constructor","props","characters","randomizedCharacters","queue","matched","clickCount","player","generatePlayer","statusElement","document","getElementById","appendChild","flipMe","currentCard","includes","character","push","length","setState","prevState","isFlipped","id","handleClick","play","innerText","sleep","then","style","display","ms","currentObject","Promise","resolve","setTimeout","shuffleArray","array","currentIndex","temporaryValue","randomIndex","Math","floor","random","render","concat","slice","map"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Card from \"./Card\";\nimport Player from \"./Player\";\nimport song from \"../resources/sounds/simpsonsThemeSong.mp3\";\n\n//TODO: add to repo, host it somewhere\n\nclass Gameboard extends Component {\n    constructor(props) {\n        super(props);\n        this.characters = [\"Apu\", \"Bart\", \"Homer\", \"Jeff\", \"Itchy\", \"Krusty\", \"Lisa\", \"Maggie\", \"Marge\", \"MrBurns\", \"Ned\", \"Ralph\", \"Smithers\"];\n        this.randomizedCharacters = [];\n        this.queue = [];\n        this.matched = [];\n        this.clickCount = 0;\n        this.player = <Player clicks={this.clickCount} initials={\"\"}/>;\n    }\n    \n\n    generatePlayer(){\n        let statusElement = document.getElementById(\"status\");\n        // statusElement.append(<Player clicks={this.clickCount} initials={\"\"}/>);\n//        statusElement.append(\"<p>this is the string</p>\");\n        statusElement.appendChild(this.player);\n    }\n\n\n    flipMe(currentCard){\n        this.clickCount++;\n\n        if(!this.matched.includes(currentCard.props.character)) {\n            this.queue.push(currentCard);\n            if (this.queue.length === 1) {\n                currentCard.setState(prevState => ({isFlipped: !prevState.isFlipped}));\n            }\n            if (this.queue.length === 2) {\n                if (this.queue[0].props.character === currentCard.props.character && this.queue[0].props.id !== currentCard.props.id) {\n                    currentCard.setState(prevState => ({isFlipped: !prevState.isFlipped}));\n                    currentCard.handleClick = null;\n                    this.queue[0].handleClick = null;\n                    this.queue = [];\n                    this.matched.push(currentCard.props.character);\n                    if (this.matched.length === 8) {\n                        document.getElementById('themeSong').play();\n                        document.getElementById('clickCountTotal').innerText=\"WINNER!!! Your click count was: \"+this.clickCount+\"!\";\n                        document.getElementById('leaderboard').innerText=\"You don't make it to our list yet\";\n                        this.generatePlayer();\n                        // document.getElementById('playerPlaceholder').append(this.player);\n                        //this.player.clicks = this.clickCount;\n                        this.sleep(1100, this).then(() => {\n                            document.getElementById('status').style.display=\"block\";\n     //                       document.getElementById('playerForm').style.display=\"block\";\n                            // document.getElementById('inputClicks').innerText=this.clickCount;\n                        });\n                    }\n                } else {\n                    currentCard.setState(prevState => ({isFlipped: !prevState.isFlipped}));\n                    this.sleep(1000, this).then(() => {\n                        currentCard.setState(prevState => ({isFlipped: !prevState.isFlipped}));\n                        this.queue[0].setState(prevState => ({isFlipped: !prevState.isFlipped}));\n                        this.queue = [];\n                    });\n                }\n            }\n        }\n    }\n\n    sleep(ms, currentObject) {\n        return new Promise(resolve => setTimeout(resolve, ms, currentObject));\n    }\n\n    shuffleArray(array) {\n        let currentIndex = array.length;\n        let temporaryValue, randomIndex;\n\n        while (0 !== currentIndex) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n\n        return array;\n    }\n\n    render() {\n        this.shuffleArray(this.characters);\n        this.randomizedCharacters = this.randomizedCharacters.concat(this.characters.slice(0,8), this.characters.slice(0, 8));\n        this.shuffleArray(this.randomizedCharacters);\n        return (\n            <div>\n                <div id=\"status\">\n                    {/*<Player />*/}\n                    <div id=\"playerPlaceholder\"></div>\n                    <div id=\"clickCountTotal\"></div>\n                    <div id=\"leaderboard\"></div>\n                    <audio id=\"themeSong\">\n                        <source src={song} type=\"audio/mp3\"></source>\n                    </audio>\n                </div>\n                <div id=\"gameboard\">\n                    {this.randomizedCharacters.map((character, id) => {return <Card id={id} parent={this} character={character} />})}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Gameboard;"]},"metadata":{},"sourceType":"module"}